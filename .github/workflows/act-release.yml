# 2024-02-24 21:40
# act-release.yml
name: act-Release

on:
  workflow_dispatch:
    inputs:
      use_scache:
        default: false
        required: true
#  push:
#    tags:
#      - "v*"
env:
  PROG_NAME: 'Far-Colorer'
  BUILD_TYPE: Release
  X_VCPKG_NUGET_ID_PREFIX: 'farcolorer'
  VCPKG_BINARY_SOURCES: 'clear;nuget,GitHub,readwrite'
  vcpkgGitCommitId: '53bef8994c541b6561884a8395ea35715ece75db'

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        build: [ x64, x86 , ARM64 ]
        include:
          - { build: x64,    arch: amd64,       triplet: x64-windows-static-rel, }
          - { build: x86,    arch: amd64_x86,   triplet: x86-windows-static-rel, }
          - { build: ARM64,  arch: amd64_arm64, triplet: arm64-windows-static-rel, }

    runs-on: windows-2022
    steps:
      - name: Export GitHub Actions cache environment variables
        uses: deep-soft/github-script@v7
        with:
          script: |
            core.exportVariable('ACTIONS_CACHE_URL',     process.env.ACTIONS_CACHE_URL     || '');
            core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');

      - name: Checkout source
        uses: deep-soft/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      #- name: Get version
      #  id: get_version
      #  uses: deep-soft/get-version-action@v4

      - name: Get version
        id: get_version
        shell: bash
        run: |
          get_version=$(cat version4far.txt);
          echo "version=$get_version";
          echo "version=$get_version" >> $GITHUB_OUTPUT;
          echo "version=$get_version" >> $GITHUB_ENV;

      - name: Setup cache
        if: ${ inputs.use_scache }}
        uses: deep-soft/cache@v4
        with:
          path: ${{ github.workspace }}
          key: cache-${{ matrix.arch }}
          restore-keys: |
            cache-${{ matrix.arch }}

      - name: Cleanup
        continue-on-error: true
        shell: bash
        run: |
          rm ./*.7z || true;
          rm ./*.zip || true;
          rm -r ./build || true;

#      - name: Install vcpkg
#        run: |
#          cd external\colorer\external\vcpkg
#          .\bootstrap-vcpkg.bat

      - name: Setup vcpkg with Github Actions binary cache
        uses: deep-soft/run-vcpkg@v11
        with:
          vcpkgDirectory: ${{ GITHUB_WORKSPACE }}\external\colorer\external\vcpkg
          vcpkgGitCommitId: ${{ env.VCPKG_COMMIT_ID }}

      - name: Install vcpkg dependencies
        env:
          VCPKG_DEFAULT_HOST_TRIPLET: ${{ matrix.triplet }}
        shell: bash
        # $VCPKG_ROOT/vcpkg install libvpx:x64-windows-static libyuv:x64-windows-static opus:x64-windows-static aom:x64-windows-static
        # $VCPKG_ROOT/vcpkg install --triplet x64-windows-static --x-install-root="$VCPKG_ROOT/installed"
        run: |
          $VCPKG_ROOT/vcpkg install --triplet ${{ matrix.triplet }} --x-install-root="$VCPKG_ROOT/installed"

      - name: Add C++ build tools to PATH
        uses: deep-soft/msvc-dev-cmd@v1
        with:
          arch: ${{ matrix.arch }}

#      - name: Setup NuGet Credentials for vpckg cache
#        shell: bash
#        run: >
#          `$VCPKG_INSTALLATION_ROOT/vcpkg fetch nuget | tail -n 1`
#          sources add
#          -source "https://nuget.pkg.github.com/colorer/index.json"
#          -storepasswordincleartext
#          -name "GitHub"
#          -username "${{ secrets.PACKAGES_GITHUB_USER }}"
#          -password "${{ secrets.PACKAGES_GITHUB_TOKEN }}"

      - name: Create Build folder
        # cmake -E make_directory build
        run: |
          mkdir -p build

      - name: Configure CMake
        shell: bash
        run: >
          cmake -S . -B build -G "Ninja"
          -DCMAKE_BUILD_TYPE=$BUILD_TYPE
          -DCOLORER_BUILD_ARCH=${{ matrix.build }}
          -DCMAKE_TOOLCHAIN_FILE=$GITHUB_WORKSPACE/external/colorer/external/vcpkg/scripts/buildsystems/vcpkg.cmake
          -DVCPKG_TARGET_TRIPLET=${{ matrix.triplet }}
          -DVCPKG_OVERLAY_PORTS=$GITHUB_WORKSPACE/external/colorer/external/vcpkg-ports
          -DVCPKG_OVERLAY_TRIPLETS=$GITHUB_WORKSPACE/external/colorer/external/vcpkg-triplets
          -DVCPKG_FEATURE_FLAGS=manifests,versions

      - name: Build
        shell: bash
        run: |
          cmake --build build --config ${{ env.BUILD_TYPE }}

      - name: Install
        # working-directory: build
        shell: bash
        run: |
          cmake --install build --config ${{ env.BUILD_TYPE }}

      - name: Download scheme
        continue-on-error: true
        working-directory: build
        shell: bash
        run: |
          # echo "ls1"
          # ls -la *.zip || true
          zipfilename="$(find . -name "colorer-base*.zip")"
          if [[ -f $zipfilename ]]; then
            rm $zipfilename
          fi
          curl -s https://api.github.com/repos/colorer/Colorer-schemes/releases/latest | grep -o "https://.*colorer-base\.allpacked.*.zip" | xargs curl -fsLJO
          # echo "ls2"
          # ls -la *.zip
          zipfilename="$(find . -name "colorer-base*.zip")"
          echo $zipfilename
          7z x -y $zipfilename -o./install/${{ env.PROG_NAME }}/base

      - name: Set the pack file name
        shell: bash
        run: |
          echo "farcolorer_name=${{ env.PROG_NAME }}.${{ matrix.build }}.${{ steps.get_version.outputs.version }}.7z" >> $GITHUB_ENV
          echo "farcolorer_pdb_name=${{ env.PROG_NAME }}.${{ matrix.build }}.${{ steps.get_version.outputs.version }}.pdb.7z" >> $GITHUB_ENV
          echo "farcolorer_withoutbase_name=${{ env.PROG_NAME }}.${{ matrix.build }}.${{ steps.get_version.outputs.version }}.wobase.7z" >> $GITHUB_ENV

      - name: pack plugin
        working-directory: build
        shell: bash
        run: |
          if [[ -f ${{ env.farcolorer_name }} ]]; then
            rm ${{ env.farcolorer_name }} || true;
            rm ${{ env.farcolorer_pdb_name }} || true;
            rm ${{ env.farcolorer_withoutbase_name }} || true;
          fi
          7z a -m0=LZMA -mf=BCJ2 -mx9 ${{ env.farcolorer_name }} ./install/${{ env.PROG_NAME }}/* -xr!colorerpol.* -xr!colorerr.*
          7z a -m0=LZMA -mf=BCJ2 -mx9 ${{ env.farcolorer_withoutbase_name }} ./install/${{ env.PROG_NAME }}/* -x!./install/${{ env.PROG_NAME }}/base
          7z a -m0=LZMA -mf=off  -mx9 ${{ env.farcolorer_pdb_name }} ./src/colorer.pdb

      - name: Publish Release
        continue-on-error: true
        uses: deep-soft/action-gh-release@v2.1
        # ${{ env.farcolorer_name }}
        with:
          draft: false
          tag_name: "v${{ env.version }}"
          body: "Far Colorer: v${{ env.version }}"
          files: |
            build/*.7z

      - name: Prepare latest Release
        continue-on-error: false
        shell: bash
        run: |
          rm build/*pdb.7z || true;
          rm build/*wobase.7z || true;
          mv build/${{ env.farcolorer_name }} build/${{ env.PROG_NAME }}.${{ matrix.build }}.7z
          echo ${{ env.version }} > build/${{ env.PROG_NAME }}-latest.txt

      - name: Publish latest Release
        continue-on-error: false
        uses: deep-soft/action-gh-release@v2.1
        with:
          draft: false
          tag_name: ${{ env.PROG_NAME }}-latest
          body: "Far Colorer latest: v${{ env.version }}"
          files: |
            build/${{ env.PROG_NAME }}.${{ matrix.build }}.7z
            build/${{ env.PROG_NAME }}-latest.txt

      - name: Cleanup
        continue-on-error: true
        shell: bash
        run: |
          rm build/*.7z  || true;
          rm build/*.zip || true;
